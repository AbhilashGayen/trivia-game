{"version":3,"sources":["serviceWorker.js","redux/quiz/quiz.types.js","redux/quiz/quiz.reducer.js","redux/store.js","components/button.js","api/getQuiz.js","components/timer.js","components/card.js","components/score.js","App.js","redux/container/app.container.js","redux/quiz/quiz.action.js","index.js"],"names":["Boolean","window","location","hostname","match","QuizActionTypes","INITIAL_STATE","quizData","correctAnswerCount","currentQuestion","store","createStore","state","action","type","Button","onClick","children","id","optionButton","button","initial","opacity","whileHover","scale","textShadow","boxShadow","className","checkResponse","response","status","console","log","json","Timer","props","seconds","this","duration","timeoutFn","setState","prevState","interval","setInterval","tick","clearInterval","timeLeft","React","Component","Card","question","correct_answer","incorrect_answers","checkAnswerFunction","totalQuestions","answers","concat","sort","div","animate","transition","map","answer","i","key","Score","refresh","score","span","rotate","stiffness","damping","App","populateQuizCard","record","index","length","checkAnswer","atob","x","restartGame","clear","resetGame","fetchQuiz","setQuizData","fetch","then","catch","err","Error","results","bind","incrementCorrectAnswers","updateCurrentQuestion","AppContainer","connect","dispatch","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bda9232f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const QuizActionTypes = {\n    SET_QUIZ_QUESTIONS: \"SET_QUIZ_QUESTIONS\",\n    INCREMENT_CORRECT_ANSWERS: \"INCREMENT_CORRECT_ANSWERS\",\n    UPDATE_CURRENT_QUESTION: \"UPDATE_CURRENT_QUESTION\",\n    RESET_GAME: \"RESET_GAME\",\n  };\n  ","import { QuizActionTypes } from \"./quiz.types\";\n\nconst INITIAL_STATE = {\n  quizData: null,\n  correctAnswerCount: 0,\n  currentQuestion: 0,\n};\n\nexport const QuizReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case QuizActionTypes.SET_QUIZ_QUESTIONS:\n      return {\n        ...state,\n        quizData: action.quizData,\n      };\n    case QuizActionTypes.UPDATE_CURRENT_QUESTION:\n      return {\n        ...state,\n        currentQuestion: state.currentQuestion + 1,\n      };\n    case QuizActionTypes.INCREMENT_CORRECT_ANSWERS:\n      return {\n        ...state,\n        correctAnswerCount: state.correctAnswerCount + 1,\n      };\n    case QuizActionTypes.RESET_GAME:\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\nimport { QuizReducer } from '../redux/quiz/quiz.reducer';\n\nexport const store = createStore(QuizReducer);","import React from \"react\";\nimport { motion } from \"framer-motion\";\n\n// Button Component\nconst Button = ({ onClick, children, id, optionButton }) => {\n  return (\n    <motion.button\n      initial={{ opacity: 0.9 }}\n      whileHover={{\n        scale: 1.2,\n        opacity: 1,\n        textShadow: \"0px 0px 1px rgb(255,255,255)\",\n        boxShadow: \"0px 0px 3px rgb(255,255,255)\",\n      }}\n      className={`${optionButton ? \"optionButton\" : \"\"}`} //Adding optionsbutton class if quiz options \n      onClick={onClick}\n      id={id}\n    >\n      {children}\n    </motion.button>\n  );\n};\n\nexport default Button;\n","// Check response code and return response as json\nconst checkResponse = (response) => {\n  if (response.status !== 200) {\n    console.log(`Error with the request! ${response.status}`);\n  } \n  return response.json();\n};\n\n\n// Fetch quiz data\nexport const getQuiz = () => {\n  return fetch(\n    `https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple&encode=base64`\n  )\n    .then(checkResponse)\n    .catch((err) => {\n      throw new Error(`fetching the quiz failed ${err}`);\n    });\n};\n","import React from \"react\";\n\n// Timer Component - countdown timer for each question\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 0,\n    };\n  }\n\n  // Checks remaining time and redirects if duration exceeds\n  tick() {\n    const { duration, timeoutFn } = this.props;\n    if (this.state.seconds === duration) {\n      timeoutFn();\n    } else {\n      this.setState((prevState) => ({\n        seconds: prevState.seconds + 1,\n      }));\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000); // Sets interval time\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const { duration } = this.props;\n    let timeLeft = duration - this.state.seconds;\n    return (\n      <div className=\"timer\">\n        <span>0:{timeLeft < 10 ? `0${timeLeft}` : timeLeft}</span>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Button from \"./button\";\nimport Timer from \"./timer\";\nimport { motion } from \"framer-motion\";\n\n// Card Component\n\nconst Card = (props) => {\n  const {\n    question,\n    correct_answer,\n    incorrect_answers,\n    checkAnswerFunction,\n    duration,\n    currentQuestion,\n    totalQuestions,\n  } = props;\n  // Concatenating correct_answers and worng_answers into single array\n  const answers = [correct_answer].concat(incorrect_answers).sort(); //TODO: Implement array shuffle, but settling for sort now\n  return (\n    <motion.div\n      initial={{  opacity: 0 }}\n      animate={{  opacity: 1 }}\n      transition={{ duration: 0.7 }}\n      className=\"card\"\n    >\n      <p>\n        {currentQuestion + 1}/{totalQuestions}\n      </p>\n\n      <Timer duration={duration} timeoutFn={checkAnswerFunction(true, false)} />\n      <h1>{question}</h1>\n\n      {/* Map answers as buttons */}\n      <div className=\"options-gird\">\n        {answers.map((answer, i) => {\n          return (\n            <div key={i} className=\"option-box\">\n              <Button\n                key={i}\n                onClick={checkAnswerFunction(answer, correct_answer)}\n                optionButton\n              >\n                {answer}\n              </Button>\n            </div>\n          );\n        })}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport Button from \"./button\";\n\n// Score Component - displays quiz score\n\nconst Score = ({ refresh, score }) => {\n  return (\n    <section className=\"card\">\n      <h1>Your Score:</h1>\n      <motion.span\n        initial={{ rotate: 90, scale: 0 }}\n        animate={{ rotate: 360, scale: 1 }}\n        transition={{\n          type: \"spring\",\n          stiffness: 260,\n          damping: 20,\n        }}\n        className=\"result\"\n      >\n        {score}\n      </motion.span>\n      {/* Resets quiz data */}\n      <Button onClick={refresh}>Play Again</Button>\n    </section>\n  );\n};\n\nexport default Score;\n","import React, { Component } from \"react\";\nimport Button from \"./components/button\";\nimport { getQuiz } from \"./api/getQuiz\";\nimport Card from \"./components/card\";\nimport Score from \"./components/score\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAnswer = this.checkAnswer.bind(this);\n  }\n\n  // Function to check correct answers\n  checkAnswer(answer, correct_answer) {\n    const {\n      incrementCorrectAnswers,\n      updateCurrentQuestion,\n      currentQuestion,\n    } = this.props;\n    return () => {\n      console.log(answer + \":\" + (answer === correct_answer)); // consoling the submitted answer with ture or false\n      if (answer === correct_answer) {\n        incrementCorrectAnswers(); // incrementing if answer is correct\n      }\n      // incrementing current question index\n      updateCurrentQuestion(currentQuestion);\n    };\n  }\n\n  // Populating Quiz Card one by one\n  populateQuizCard = (record, index) => {\n    const { correct_answer, incorrect_answers, question } = record;\n    const { length } = this.props.quizData;\n    return (\n      <Card\n        key={index}\n        checkAnswerFunction={this.checkAnswer}\n        question={atob(question)}\n        duration={10}\n        correct_answer={atob(correct_answer)}\n        incorrect_answers={incorrect_answers.map((x) => atob(x))}\n        currentQuestion={index}\n        totalQuestions={length}\n      />\n    );\n  };\n\n  // Removes sate data to start quiz again\n  restartGame = () => {\n    console.clear();\n    const { resetGame } = this.props;\n    resetGame();\n  };\n\n  // Fetch Quiz data\n  fetchQuiz = () => {\n    const { setQuizData } = this.props;\n    getQuiz().then((quizData) => setQuizData(quizData.results));\n  };\n\n  render() {\n    const { quizData ,currentQuestion, correctAnswerCount } = this.props;\n\n    return (\n      <div className=\"app\">\n        {!quizData ? (\n          <div className=\"card margin-top\">\n            <h1>General Knowledge Quiz</h1>\n            <h3>Total Questions : 10 | Time per Question : 10sec</h3>\n            <Button onClick={this.fetchQuiz}>Start Quiz</Button>\n          </div>\n        ) : null}\n\n        {quizData && currentQuestion < 10\n          ? this.populateQuizCard(quizData[currentQuestion], currentQuestion)\n          : \"\"}\n        {quizData && currentQuestion === 10 ? (\n          <Score score={correctAnswerCount} refresh={this.restartGame} />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import App from \"../../App\";\nimport { connect } from \"react-redux\";\nimport {\n  setQuizQuestions,\n  resetGame,\n  incrementCorrectAnswers,\n  updateCurrentQuestion,\n} from \"../quiz/quiz.action\";\n\nconst mapStateToProps = (state) => {\n  return {\n    quizData: state.quizData,\n    currentQuestion: state.currentQuestion,\n    correctAnswerCount: state.correctAnswerCount,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setQuizData: (quizData) => dispatch(setQuizQuestions(quizData)),\n    incrementCorrectAnswers: () => dispatch(incrementCorrectAnswers()),\n    updateCurrentQuestion: (currentQuestion) =>\n      dispatch(updateCurrentQuestion(currentQuestion)),\n    resetGame: () => dispatch(resetGame()),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default AppContainer;\n","export const setQuizQuestions = (data) => {\n  return {\n    type: \"SET_QUIZ_QUESTIONS\",\n    quizData: data,\n  };\n};\n\nexport const incrementCorrectAnswers = () => {\n  return {\n    type: \"INCREMENT_CORRECT_ANSWERS\",\n  };\n};\n\nexport const updateCurrentQuestion = currentQuestion => {\n  return {\n    type: 'UPDATE_CURRENT_QUESTION',\n    currentQuestion : 1\n  };\n};\n\nexport const resetGame = () => {\n  return {\n    type: \"RESET_GAME\",\n  };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport AppContainer from './redux/container/app.container'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <AppContainer />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}